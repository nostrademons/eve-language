typedef Range: { start: Int, stop: Int, step: Int }

@type(Int, Int -> Range)
def Range(start, stop):
    """
    Creates a range between ``start`` and ``stop`` with step of 1.

    Eve>>> Range(2, 10)->step
    1

    There's also syntactic sugar built into the parser for ranges:

    Eve>>> 1..5 
    {'start': 1, 'stop': 5, 'step': 1}

    """
    Range(start, stop, 1)

@type(Int -> Range)
def Range(length):
    """
    Creates a range between 0 and ``length``.

    Eve>>> Range(5)->start
    0

    """
    Range(0, length)

@type(Int, Int, Int -> Range)
def Range(start, stop, step): 
    """
    Creates a range between ``start`` (inclusive) and ``stop`` (exclusive), with
    values increasing by ``step`` each iteration.

    Eve>>> r = Range(1, 9, 2)
    {'start': 1, 'stop': 9, 'step': 2}
    Eve>>> r->start
    1
    Eve>>> r->stop
    9
    Eve>>> r->step
    2

    """
    { start: start, stop: stop, step: step }

@type(Range -> Iterator)
def iter(range): 
    """
    Iterates over the range.  Range objects are their own iterators; each call
    to next returns a fresh range object for the next subrange.

    Eve>>> (1..5)->iter->next->get
    2
    Eve>>> (1..2)->iter->next->has_next
    False

    """
    range

def get(range): range->start
def next(range): Range(range->start + range->step, range->stop, range->step)
def has_next(range): range->start < range->stop

@type(Range -> Int)
def len(range):
    """
    Returns the number of integers in the range.

    Eve>>> len(Range(5))  
    5
    Eve>>> len(Range(1, 9, 2))
    4

    """
    (range->stop - range->start) / range->step

